// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  address   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  transactions Transaction[]
  identityProofs IdentityProof[]
  agentInteractions AgentInteraction[]

  @@map("users")
}

model Transaction {
  id          String   @id @default(cuid())
  hash        String   @unique
  from        String
  to          String
  amount      String
  currency    String
  status      String @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model IdentityProof {
  id          String   @id @default(cuid())
  proofType   String   // "age", "country", "sanction"
  proofData   String   // Encrypted proof data
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("identity_proofs")
}

model AgentInteraction {
  id          String   @id @default(cuid())
  agentId     String
  message     String
  response    String?
  status      String @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("agent_interactions")
}

model DelegatedWallet {
  id          String   @id @default(cuid())
  brewitId    String   @unique
  address     String   @unique
  name        String
  type        String   // "bot_pol", "bot_eth", "bot_matic", "user_delegated"
  isActive    Boolean  @default(true)
  permissions String   // JSON string of permission strings
  createdAt   DateTime @default(now())
  lastUsed    DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  automatedOperations AutomatedOperation[]

  @@map("delegated_wallets")
}

model AutomatedOperation {
  id                String   @id @default(cuid())
  brewitOperationId String   @unique
  walletAddress     String
  name              String
  task              String   // "send", "swap", "stake", "unstake", "claim"
  repeatInterval    Int      // Repeat interval in milliseconds
  maxExecutions     Int      // Maximum number of executions
  payload           String   // JSON string of operation payload
  status            String   @default("SCHEDULED") // "SCHEDULED", "RUNNING", "COMPLETED", "FAILED", "CANCELLED"
  scheduledAt       DateTime
  lastExecuted      DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  delegatedWalletId String?
  delegatedWallet   DelegatedWallet? @relation(fields: [delegatedWalletId], references: [id])

  @@map("automated_operations")
}

// Enums converted to strings for SQLite compatibility
// TransactionStatus: PENDING, COMPLETED, FAILED, CANCELLED
// AgentStatus: PENDING, PROCESSING, COMPLETED, FAILED
// OperationStatus: SCHEDULED, RUNNING, COMPLETED, FAILED, CANCELLED
